import { Resend } from 'resend'

type Person = { name: string; title: string }
type MusterEntry = { name: string; location: string; time: string }

const resend = new Resend(process.env.RESEND_API_KEY)

function isSevenAM(now = new Date()) {
  const formatter = new Intl.DateTimeFormat('en-US', {
    timeZone: 'America/New_York',
    hour: '2-digit',
    hour12: false
  })
  const hour = Number(formatter.formatToParts(now).find(p => p.type === 'hour')?.value ?? '99')
  return hour === 7
}

function nyDateString(d = new Date()) {
  const f = new Intl.DateTimeFormat('en-CA', { 
    timeZone: 'America/New_York',
    year: 'numeric', month: '2-digit', day: '2-digit'
  })
  return f.format(d)
}

function parseExpected(raw: unknown): Person[] {
  if (Array.isArray(raw)) return raw as Person[]
  if (typeof raw !== 'string') return []
  let s = raw.trim()
  if (s.startsWith("'") && s.endsWith("'")) s = s.slice(1, -1)
  try {
    let v: unknown = JSON.parse(s)
    if (typeof v === 'string') v = JSON.parse(v)
    return Array.isArray(v) ? (v as Person[]) : []
  } catch { return [] }
}

function renderEmailHTML(dateNY: string, rows: Array<{ sailor: string; location: string; time: string; status: string }>) {
  const tr = rows.map(r => `
    <tr>
      <td style="padding:6px 8px;border-bottom:1px solid #eee;">${r.sailor}</td>
      <td style="padding:6px 8px;border-bottom:1px solid #eee;">${r.location}</td>
      <td style="padding:6px 8px;border-bottom:1px solid #eee;">${r.time}</td>
      <td style="padding:6px 8px;border-bottom:1px solid #eee;">${r.status}</td>
    </tr>
  `).join('')
  return `
    <div style="font-family:ui-sans-serif,system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;color:#0f172a">
      <h2 style="margin:0 0 12px">Daily Muster — ${dateNY} (America/New_York)</h2>
      <table cellpadding="0" cellspacing="0" style="border-collapse:collapse;font-size:14px;min-width:480px">
        <thead>
          <tr>
            <th align="left" style="padding:6px 8px;border-bottom:2px solid #0ea5e9;">Sailor</th>
            <th align="left" style="padding:6px 8px;border-bottom:2px solid #0ea5e9;">Location</th>
            <th align="left" style="padding:6px 8px;border-bottom:2px solid #0ea5e9;">Time</th>
            <th align="left" style="padding:6px 8px;border-bottom:2px solid #0ea5e9;">Status</th>
          </tr>
        </thead>
        <tbody>${tr}</tbody>
      </table>
      <p style="color:#64748b;font-size:12px;margin-top:12px">Generated by cron at ${new Date().toISOString()}</p>
    </div>`
}

export default defineEventHandler(async (event) => {
  if (!isSevenAM()) {
    return { ok: true, skipped: true, reason: 'Not 07:00' }
  }

  const storage = useStorage()
  const dateNY = nyDateString()
  const sentKey = `email-sent:${dateNY}`

  const already = await storage.getItem<boolean>(sentKey)
  if (already) {
    return { ok: true, skipped: true, reason: 'Already sent today' }
  }

  const { public: { expectedPersonnel } } = useRuntimeConfig()
  const people = parseExpected(expectedPersonnel)

  const musterKey = `muster:${dateNY}`
  const musters = (await storage.getItem<MusterEntry[]>(musterKey)) ?? []

  const rows = people.map(p => {
    const entry = musters.find(m => m.name === p.name)
    return {
      sailor: `${p.title} ${p.name}`,
      location: entry?.location ?? '—',
      time: entry?.time ?? '—',
      status: entry ? '✅ Mustered' : '❌ Not Mustered'
    }
  })

  const html = renderEmailHTML(dateNY, rows)

  const to = process.env.EMAIL_TO
  const from = process.env.EMAIL_FROM 
  if (!process.env.RESEND_API_KEY || !to || !from) {
    throw createError({ statusCode: 500, statusMessage: 'Email env not configured' })
  }

  const { error } = await resend.emails.send({
    from, to, subject: `Daily Muster — ${dateNY}`, html
  })

  if (error) {
    throw createError({ statusCode: 500, statusMessage: `Resend error: ${error.message || error}` })
  }

  await storage.setItem(sentKey, true)

  return { ok: true, sent: true }
})
